// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable IDE0005 // Extra using directive is ok.

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Agents.AI;
using Microsoft.Agents.AI.Workflows;
using Microsoft.Agents.AI.Workflows.Declarative;
using Microsoft.Agents.AI.Workflows.Declarative.Kit;
using Microsoft.Extensions.AI;

namespace Demo.DeclarativeCode;

/// <summary>
/// This class provides a factory method to create a <see cref="Workflow" /> instance.
/// </summary>
/// <remarks>
/// The workflow defined here was generated from a declarative workflow definition.
/// Declarative workflows utilize Power FX for defining conditions and expressions.
/// To learn more about Power FX, see:
/// https://learn.microsoft.com/power-platform/power-fx/formula-reference-copilot-studio
/// </remarks>
public static class SampleWorkflowProvider
{
    /// <summary>
    /// The root executor for a declarative workflow.
    /// </summary>
    internal sealed class WorkflowDemoRootExecutor<TInput>(
        DeclarativeWorkflowOptions options,
        Func<TInput, ChatMessage> inputTransform) :
        RootExecutor<TInput>("workflow_demo_Root", options, inputTransform)
        where TInput : notnull
    {
        protected override async ValueTask ExecuteAsync(TInput message, IWorkflowContext context, CancellationToken cancellationToken)
        {
            // Set environment variables
            await this.InitializeEnvironmentAsync(
                context,
                "FOUNDRY_AGENT_ANSWER").ConfigureAwait(false);

        }
    }

    /// <summary>
    /// Adds a new message to the specified agent conversation
    /// </summary>
    internal sealed class AddInputMessageExecutor(FormulaSession session, WorkflowAgentProvider agentProvider) : ActionExecutor(id: "add_input_message", session)
    {
        // <inheritdoc />
        protected override async ValueTask<object?> ExecuteAsync(IWorkflowContext context, CancellationToken cancellationToken)
        {
            string? conversationId = await context.ReadStateAsync<string>(key: "ConversationId", scopeName: "System").ConfigureAwait(false);
            if (string.IsNullOrWhiteSpace(conversationId))
            {
                throw new DeclarativeActionException($"Conversation identifier must be defined: {this.Id}");
            }
            ChatMessage newMessage = new(ChatRole.User, await this.GetContentAsync(context).ConfigureAwait(false)) { AdditionalProperties = this.GetMetadata() };
            await agentProvider.CreateMessageAsync(conversationId, newMessage, cancellationToken).ConfigureAwait(false);
            return default;
        }

        private async ValueTask<IList<AIContent>> GetContentAsync(IWorkflowContext context)
        {
            List<AIContent> content = [];

            string contentValue1 =
                await context.FormatTemplateAsync(
                    """
                    {System.LastMessage.Text}
                    """);
            content.Add(new TextContent(contentValue1));
            return content;
        }

        private AdditionalPropertiesDictionary? GetMetadata()
        {
            Dictionary<string, object?>? metadata = null;

            if (metadata is null)
            {
                return null;
            }

            return new AdditionalPropertiesDictionary(metadata);
        }
    }

    /// <summary>
    /// Invokes an agent to process messages and return a response within a conversation context.
    /// </summary>
    internal sealed class InvokeAnalystExecutor(FormulaSession session, WorkflowAgentProvider agentProvider) : AgentExecutor(id: "invoke_analyst", session, agentProvider)
    {
        // <inheritdoc />
        protected override async ValueTask<object?> ExecuteAsync(IWorkflowContext context, CancellationToken cancellationToken)
        {
            string? agentName = await context.ReadStateAsync<string>(key: "FOUNDRY_AGENT_ANSWER", scopeName: "Env").ConfigureAwait(false);

            if (string.IsNullOrWhiteSpace(agentName))
            {
                throw new DeclarativeActionException($"Agent name must be defined: {this.Id}");
            }

            string? conversationId = await context.ReadStateAsync<string>(key: "ConversationId", scopeName: "System").ConfigureAwait(false);
            bool autoSend = true;
            string additionalInstructions =
                await context.FormatTemplateAsync(
                    """
                    You are a marketing analyst. Given a product description, identify:
                    - Key features
                    - Target audience
                    - Unique selling points
                    """);
            IList<ChatMessage>? inputMessages = null;

            AgentRunResponse agentResponse =
                await InvokeAgentAsync(
                    context,
                    agentName,
                    conversationId,
                    autoSend,
                    additionalInstructions,
                    inputMessages,
                    cancellationToken).ConfigureAwait(false);

            if (autoSend)
            {
                await context.AddEventAsync(new AgentRunResponseEvent(this.Id, agentResponse)).ConfigureAwait(false);
            }

            return default;
        }
    }

    /// <summary>
    /// Invokes an agent to process messages and return a response within a conversation context.
    /// </summary>
    internal sealed class InvokeWriterExecutor(FormulaSession session, WorkflowAgentProvider agentProvider) : AgentExecutor(id: "invoke_writer", session, agentProvider)
    {
        // <inheritdoc />
        protected override async ValueTask<object?> ExecuteAsync(IWorkflowContext context, CancellationToken cancellationToken)
        {
            string? agentName = await context.ReadStateAsync<string>(key: "FOUNDRY_AGENT_ANSWER", scopeName: "Env").ConfigureAwait(false);

            if (string.IsNullOrWhiteSpace(agentName))
            {
                throw new DeclarativeActionException($"Agent name must be defined: {this.Id}");
            }

            string? conversationId = await context.ReadStateAsync<string>(key: "ConversationId", scopeName: "System").ConfigureAwait(false);
            bool autoSend = true;
            string additionalInstructions =
                await context.FormatTemplateAsync(
                    """
                    You are a marketing copywriter. Given a block of text describing features, audience, and USPs,
                    compose a compelling marketing copy (like a newsletter section) that highlights these points.
                    Output should be short (around 150 words), output just the copy as a single text block.
                    """);
            IList<ChatMessage>? inputMessages = null;

            AgentRunResponse agentResponse =
                await InvokeAgentAsync(
                    context,
                    agentName,
                    conversationId,
                    autoSend,
                    additionalInstructions,
                    inputMessages,
                    cancellationToken).ConfigureAwait(false);

            if (autoSend)
            {
                await context.AddEventAsync(new AgentRunResponseEvent(this.Id, agentResponse)).ConfigureAwait(false);
            }

            return default;
        }
    }

    /// <summary>
    /// Invokes an agent to process messages and return a response within a conversation context.
    /// </summary>
    internal sealed class InvokeEditorExecutor(FormulaSession session, WorkflowAgentProvider agentProvider) : AgentExecutor(id: "invoke_editor", session, agentProvider)
    {
        // <inheritdoc />
        protected override async ValueTask<object?> ExecuteAsync(IWorkflowContext context, CancellationToken cancellationToken)
        {
            string? agentName = await context.ReadStateAsync<string>(key: "FOUNDRY_AGENT_ANSWER", scopeName: "Env").ConfigureAwait(false);

            if (string.IsNullOrWhiteSpace(agentName))
            {
                throw new DeclarativeActionException($"Agent name must be defined: {this.Id}");
            }

            string? conversationId = await context.ReadStateAsync<string>(key: "ConversationId", scopeName: "System").ConfigureAwait(false);
            bool autoSend = true;
            string additionalInstructions =
                await context.FormatTemplateAsync(
                    """
                    You are an editor. Given the draft copy, correct grammar, improve clarity, ensure consistent tone,
                    give format and make it polished. Output the final improved copy as a single text block.
                    """);
            IList<ChatMessage>? inputMessages = null;

            AgentRunResponse agentResponse =
                await InvokeAgentAsync(
                    context,
                    agentName,
                    conversationId,
                    autoSend,
                    additionalInstructions,
                    inputMessages,
                    cancellationToken).ConfigureAwait(false);

            if (autoSend)
            {
                await context.AddEventAsync(new AgentRunResponseEvent(this.Id, agentResponse)).ConfigureAwait(false);
            }

            return default;
        }
    }

    public static Workflow CreateWorkflow<TInput>(
        DeclarativeWorkflowOptions options,
        Func<TInput, ChatMessage>? inputTransform = null)
        where TInput : notnull
    {
        // Create root executor to initialize the workflow.
        inputTransform ??= (message) => DeclarativeWorkflowBuilder.DefaultTransform(message);
        WorkflowDemoRootExecutor<TInput> workflowDemoRoot = new(options, inputTransform);
        DelegateExecutor workflowDemo = new(id: "workflow_demo", workflowDemoRoot.Session);
        AddInputMessageExecutor addInputMessage = new(workflowDemoRoot.Session, options.AgentProvider);
        InvokeAnalystExecutor invokeAnalyst = new(workflowDemoRoot.Session, options.AgentProvider);
        InvokeWriterExecutor invokeWriter = new(workflowDemoRoot.Session, options.AgentProvider);
        InvokeEditorExecutor invokeEditor = new(workflowDemoRoot.Session, options.AgentProvider);

        // Define the workflow builder
        WorkflowBuilder builder = new(workflowDemoRoot);

        // Connect executors
        builder.AddEdge(workflowDemoRoot, workflowDemo);
        builder.AddEdge(workflowDemo, addInputMessage);
        builder.AddEdge(addInputMessage, invokeAnalyst);
        builder.AddEdge(invokeAnalyst, invokeWriter);
        builder.AddEdge(invokeWriter, invokeEditor);

        // Build the workflow
        return builder.Build();
    }
}
